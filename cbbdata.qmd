---
title: "cbbdata"
format: pdf
editor: visual
---

```{r loading packages, message=FALSE}
# persistent log-in
cbbdata::cbd_login()
library(cbbdata)
library(tidyverse)
library(tidymodels)
library(caret)
```

```{r getting Duke data}
duke_data <- cbd_torvik_game_factors() %>% 
  filter(team == 'Duke')
```

```{r simulating Duke UNC game for feb 2024}
duke_unc_game <- cbd_torvik_season_prediction('Duke',2024) %>% 
  filter(opp == 'North Carolina', game_location == 'A')
duke_unc_game
unc_duke_game <- cbd_torvik_season_prediction('North Carolina',2024) %>% 
  filter(opp == 'Duke', game_location == 'H')
unc_duke_game
result <- rbinom(100, 1, 0.2346)
hist(result) 
```

```{r collecting data from all Duke UNC games 2015-2023, include=FALSE}
home_games <- list("20150218","20160305","20170209","20180303","20190220","20200307","20210206","20220305","20230204")
away_games <- list("20150307","20160217","20170304","20180208","20190309","20200208","20210306","20220205","20230304")
home_predictions <- cbd_torvik_game_prediction('Duke','North Carolina', "20150218")
for (x in home_games){
  this_pred = cbd_torvik_game_prediction('Duke','North Carolina', x)
  home_predictions = full_join(home_predictions, this_pred)
}
away_predictions <- cbd_torvik_game_prediction('North Carolina', 'Duke', "20150307")
for (x in away_games){
  this_pred = cbd_torvik_game_prediction('North Carolina','Duke', x)
  away_predictions = full_join(away_predictions, this_pred)
}

full_predictions <- full_join(home_predictions, away_predictions)
```

```{r recording box score data from those games, include=FALSE}
date <- c("02/17/2015","03/06/2015","02/16/2016","03/04/2016","02/08/2017","03/03/2017","02/07/2018","03/02/2018","02/19/2019","03/08/2019","02/07/2020","03/06/2020","02/05/2021","03/05/2021","02/04/2022","03/04/2022","02/03/2023","03/03/2023")
date <- as.Date(date, format = "%m/%d/%Y")
winner <- c("Duke","Duke","Duke","North Carolina","Duke","North Carolina","North Carolina","Duke","North Carolina","North Carolina","Duke","Duke","North Carolina","North Carolina","Duke","North Carolina","Duke","Duke")
diff <- c(2,7,1,-4,8,-7,-4,10,-16,-9,2,13,-4,-18,20,-13,6,5)
duke_home <- c("Home","Away","Away","Home","Home","Away","Away","Home","Home","Away","Away","Home","Home","Away","Away","Home","Home","Away")
real_results <- data.frame(date,winner,diff,duke_home)
```

```{r showing projected vs actual point differential, echo=FALSE}
full_predictions <- full_predictions %>% 
  mutate(duke_home = case_when(team == "Duke" & location == "H"  ~ "Home",
                               team == "North Carolina" & location == "A" ~ "Home",
                               TRUE ~ "Away"),
         duke_pts = if_else(team == "Duke", pts, 0),
         unc_pts = if_else(team == "North Carolina",pts,0))

full_predictions <- full_predictions %>% 
  group_by(date) %>% 
  mutate(diff = max(duke_pts) - max(unc_pts))


full_predictions %>% 
  filter(team == "Duke") %>% 
  ggplot(aes(x = date, y = diff, color = duke_home)) +
  geom_point() +
  geom_hline(yintercept =  0, linetype = 2) +
  facet_wrap(~ duke_home) +
  labs(title = "Projected point differential of Duke vs. UNC",
       subtitle = "From 2015-2023",
       y = "Duke points minus UNC points",
       x = "Time",
       color = "location")
real_results %>% 
  ggplot(aes(x = date, y = diff, color = duke_home)) +
  geom_point() +
  geom_hline(yintercept =  0, linetype = 2) +
  facet_wrap(~ duke_home) +
  labs(title = "Actual point differential of Duke vs. UNC",
       subtitle = "From 2015-2023",
       y = "Duke points minus UNC points",
       x = "Time",
       color = "location")
```

```{r getting Duke ACC predictions, include=FALSE}
acc_2023 <- full_join(cbd_torvik_season_prediction("Duke", 2023,"20230101"),duke_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

acc_2022 <- full_join(cbd_torvik_season_prediction("Duke", 2022,"20220101"),duke_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test <- full_join(acc_2023,acc_2022)

acc_2021 <- full_join(cbd_torvik_season_prediction("Duke", 2021,"20210101"),duke_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test <- full_join(test,acc_2021)

acc_2020 <- full_join(cbd_torvik_season_prediction("Duke", 2020,"20200101"),duke_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test <- full_join(test,acc_2020)

duke_final <- test %>% 
  mutate(diff = pts_scored - pts_allowed,
         projection = case_when(win_per > 50  ~ "Projected Win", 
                  win_per <50 ~ "Projected Loss", 
                   TRUE ~ "Too close to call")) %>% 
  filter(!is.na(win_per))

```

```{r getting UNC predictions, include=FALSE}
unc_data <- cbd_torvik_game_factors() %>% 
  filter(team == 'North Carolina')

acc_2023_unc <- full_join(cbd_torvik_season_prediction("North Carolina", 2023, date = "20230101"),unc_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

acc_2022_unc <- full_join(cbd_torvik_season_prediction("North Carolina", 2022, "20220101"),unc_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test_unc <- full_join(acc_2023_unc,acc_2022_unc)

acc_2021_unc <- full_join(cbd_torvik_season_prediction("North Carolina", 2021, "20210101"),unc_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test_unc <- full_join(test_unc,acc_2021_unc)

acc_2020_unc <- full_join(cbd_torvik_season_prediction("North Carolina", 2020, "20200101"),unc_data, by = join_by(date)) %>% 
  select(-location, -avg_marg) %>% 
  filter(! is.na(pts_scored), opp_conf == "ACC", !is.na(team.x))

test_unc <- full_join(test_unc,acc_2020_unc)

unc_final <- test_unc %>% 
  mutate(diff = pts_scored - pts_allowed,
         projection = case_when(win_per > 50  ~ "Projected Win", 
                  win_per <50 ~ "Projected Loss", 
                   TRUE ~ "Too close to call")) %>% 
  filter(!is.na(win_per), team.x == "North Carolina")

```

```{r conf_matrix for just duke, include=FALSE}
#library(caret)

conf_mat_data <- duke_final %>% 
  #filter(projection != "Too close to call") %>% 
  mutate(projection_bin = fct_relevel(as.factor(if_else(projection == "Projected Win", 1, 0)), "1"),
         result_bin = fct_relevel(as.factor(if_else(result == "W", 1, 0))),"1")
conf_matrix <- confusionMatrix(data=conf_mat_data$projection_bin, reference = conf_mat_data$result_bin, positive = "1")
conf_matrix
```

```{r conf_matrix for just unc, include=FALSE}
conf_mat_data_unc <- unc_final %>% 
  filter(projection != "Too close to call") %>% 
  mutate(projection_bin = fct_relevel(as.factor(if_else(projection == "Projected Win", 1, 0)), "1"),
         result_bin = fct_relevel(as.factor(if_else(result == "W", 1, 0))),"1")
conf_matrix_unc <- confusionMatrix(data=conf_mat_data_unc$projection_bin, reference = conf_mat_data_unc$result_bin, positive = "1")
conf_matrix_unc
```

```{r conf_matrix for Duke_UNC games}
real_results <- real_results %>% 
  mutate(bin_win = as.factor(if_else(diff > 0, 1,0)))

full_predictions <- full_predictions %>% 
  mutate(bin_win = as.factor(if_else(diff > 0, 1,0)))

filtered_predictions <- full_predictions %>% 
  filter(team == "Duke")

confusionMatrix(data=filtered_predictions$bin_win, reference = real_results$bin_win, positive = "1")
```

```{r graph for Duke UNC games, echo=FALSE}
joined_pred_real <- full_join(real_results,full_predictions, by = join_by(date))

joined_pred_real %>% 
  mutate(win_cat = fct_relevel(if_else(bin_win.x == 1, "Win", "Loss"),"Win")) %>% 
  filter(team == "Duke") %>% 
  ggplot(aes(x=win_per,y=diff.x,color = win_cat, shape = duke_home.x)) +
  #facet_wrap(~ duke_home.x) +
  geom_point(size = 3) +
  scale_color_manual(values = c("#003087","#62C6F2")) +
  geom_hline(yintercept = 0, linetype = 1) +
  geom_vline(xintercept = 50, linetype = 2) +
  labs(title = "Duke vs. UNC games predicted by Torvik formula",
       subtitle = "Games from 2015-2023",
       x = "Predicted Duke win probability (%)",
       y = "Actual point differential",
       color = "Did Duke win?",
       shape = "Where is the game?")
```


```{r graph and conf_matrix for both teams}
both_teams <- full_join(duke_final,unc_final)

both_teams %>% 
  ggplot(aes(x = win_per, y = diff, color = projection, shape = team.x)) +
  #facet_wrap(~year.y) +
  geom_hline(yintercept =  0, linetype = 1) +
  geom_vline(xintercept = 50, linetype = 2) +
  geom_point(size = 3, alpha = 0.75) +
  #geom_rect(xmin = 45, xmax = 55, ymin = -1000, ymax = 1000, alpha = 0, color = "White",linetype = 2, size = 1.5) +
  labs(title = "Duke and UNC's ACC wins and losses from 2020-23",
       subtitle = "Comparing projected win probability to actual point difference",
       shape = "",
       x = "Win probability (%)",
       y = "Actual point differential")

conf_mat_data_combo <- both_teams %>% 
  filter(projection != "Too close to call") %>% 
  mutate(projection_bin = fct_relevel(as.factor(if_else(projection == "Projected Win", 1, 0)), "1"),
         result_bin = fct_relevel(as.factor(if_else(result == "W", 1, 0))),"1")
conf_matrix_combo <- confusionMatrix(data=conf_mat_data_combo$projection_bin, reference = conf_mat_data_combo$result_bin, positive = "1")
conf_matrix_combo
```
